{
	"info": {
		"_postman_id": "9104f0c9-3fc7-450c-8e34-ddd3d2d0a69d",
		"name": "dummyjson.com",
		"description": "project site --> [https://dummyjson.com/docs/](https://dummyjson.com/docs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18912240"
	},
	"item": [
		{
			"name": "1- get all users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = \r",
							"{\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : \r",
							"    {\r",
							"        \"users\" : \r",
							"        {\r",
							"            \"type\" : \"array\",\r",
							"            \"items\" : \r",
							"            {\r",
							"                \"type\" : \"object\",\r",
							"                \"properties\" :\r",
							"                {\r",
							"                    \"id\" : {\"type\" : \"integer\"},\r",
							"                    \"firstName\" : {\"type\" : \"string\"},\r",
							"                    \"lastName\" : {\"type\" : \"string\"},\r",
							"                    \"midenName\" : {\"type\" : \"string\"},\r",
							"                    \"age\" : {\"type\" : \"integer\"},\r",
							"                    \"gender\" : {\"enum\" : [\"male\",\"female\"]},\r",
							"                    \"email\" : {\"type\" : \"string\"},\r",
							"                    \"phone\" : \r",
							"                    {\r",
							"                        \"type\" : \"string\",\r",
							"                        \"pattern\" : \"(\\\\+|00)[1-9][0-9 \\\\-\\\\(\\\\)\\\\.]{7,32}$\"\r",
							"                    },\r",
							"                    \"username\" : {\"type\" : \"string\"},\r",
							"                    \"password\" : {\"type\" : \"string\"},\r",
							"                    \"birthDate\" : \r",
							"                    {\r",
							"                        \"type\" : \"string\",\r",
							"                        \"pattern\" : \"^\\\\d{4}[\\\\/\\\\-](0?[1-9]|1[012])[\\\\/\\\\-](0?[1-9]|[12][0-9]|3[01])$\"\r",
							"                    },\r",
							"                    \"image\" : {\"type\" : \"string\"},\r",
							"                    \"bloodGroup\" : {\"enum\" : [\"A−\",\"A+\",\"B−\",\"B+\",\"AB−\",\"AB+\",\"O−\",\"O+\"]},\r",
							"                    \"height\" : {\"type\" : \"number\"},\r",
							"                    \"weight\" : {\"type\" : \"number\"},\r",
							"                    \"eyecolor\" : {\"type\" : \"string\"},\r",
							"                    \"hair\" : \r",
							"                    {\r",
							"                        \"type\" : \"object\",\r",
							"                        \"properties\" :\r",
							"                        {\r",
							"                            \"color\" : {\"type\" : \"string\"},\r",
							"                            \"type\" : {\"type\" : \"string\"}\r",
							"                        }\r",
							"                    },\r",
							"                    \"domain\" : {\"type\" : \"string\"},\r",
							"                    \"ip\" : \r",
							"                    {\r",
							"                        \"type\" : \"string\",\r",
							"                        \"pattern\" : \"^((25[0-5]|(2[0-4]|1\\\\d|[1-9]|)\\\\d)\\\\.?\\\\b){4}$\"\r",
							"                    },\r",
							"                    \"address\" : \r",
							"                    {\r",
							"                        \"type\" : \"object\",\r",
							"                        \"properties\" : \r",
							"                        {\r",
							"                            \"address\" : {\"type\" : \"string\"},\r",
							"                            \"city\" : {\"type\" : \"string\"},\r",
							"                            \"coordinates\" : \r",
							"                            {\r",
							"                                \"type\" : \"object\",\r",
							"                                \"properties\" : \r",
							"                                {\r",
							"                                    \"lat\" : {\"type\" : \"number\"},\r",
							"                                    \"lng\" : {\"type\" : \"number\"}\r",
							"                                },\r",
							"                                \"required\" : [\"lat\",\"lng\"]\r",
							"                            },\r",
							"                            \"postalCode\" : \r",
							"                            {\r",
							"                                \"type\" : \"string\",\r",
							"                                \"pattern\" : \"^\\\\d{5}([\\\\-]?\\\\d{4})?$\"\r",
							"                            },\r",
							"                            \"state\" : \r",
							"                            {\r",
							"                                \"type\" : \"string\",\r",
							"                                \"pattern\" : \"^(([Aa][EeLlKkSsZzRr])|([Cc][AaOoTt])|([Dd][EeCc])|([Ff][MmLl])|([Gg][AaUu])|([Hh][Ii])|([Ii][DdLlNnAa])|([Kk][SsYy])|([Ll][Aa])|([Mm][EeHhDdAaIiNnSsOoTt])|([Nn][EeVvHhJjMmYyCcDd])|([Mm][Pp])|([Oo][HhKkRr])|([Pp][WwAaRr])|([Rr][Ii])|([Ss][CcDd])|([Tt][NnXx])|([Uu][Tt])|([Vv][TtIiAa])|([Ww][AaVvIiYy]))$\"\r",
							"                            }\r",
							"                        },\r",
							"                        \"required\" : [\"address\",\"coordinates\",\"postalCode\",\"state\"]\r",
							"                    },\r",
							"                    \"macAddress\" : \r",
							"                    {\r",
							"                        \"type\" : \"string\",\r",
							"                        \"pattern\" : \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\"\r",
							"                    },\r",
							"                    \"university\" : {\"type\" : \"string\"},\r",
							"                    \"bank\" : \r",
							"                    {\r",
							"                        \"type\" : \"object\",\r",
							"                        \"properties\" : \r",
							"                        {\r",
							"                            \"cardExpire\" : \r",
							"                            {\r",
							"                                \"type\" : \"string\",\r",
							"                                \"pattern\" : \"^(0[1-9]|1[0-2])\\/?([0-9]{4}|[0-9]{2})$\"\r",
							"                            },\r",
							"                            \"cardNumber\" : \r",
							"                            {\r",
							"                                \"type\" : \"string\",\r",
							"                                \"pattern\" : \"^[0-9]{14,19}$\" // 14 to 19 digits\r",
							"                            },\r",
							"                            \"cardType\" : {\"type\" : \"string\"},\r",
							"                            \"currency\" : {\"type\" : \"string\"},\r",
							"                            \"iban\" : \r",
							"                            {\r",
							"                                \"type\" : \"string\",\r",
							"                                \"pattern\" : \"^([A-Z]{2}[ \\\\-]?[0-9]{2})(?=(?:[ \\\\-]?[A-Z0-9]){9,30}$)((?:[ \\\\-]?[A-Z0-9]{3,5}){2,7})([ \\\\-]?[A-Z0-9]{1,3})?$\"\r",
							"                            }\r",
							"                        },\r",
							"                        \"required\" : [\"cardExpire\",\"cardNumber\",\"cardType\",\"currency\",\"iban\"]\r",
							"                    },\r",
							"                    \"company\" : \r",
							"                    {\r",
							"                        \"type\" : \"object\",\r",
							"                        \"properties\" : \r",
							"                        {\r",
							"                            \"address\" : \r",
							"                            {\r",
							"                                \"type\" : \"object\",\r",
							"                                \"properties\" : \r",
							"                                {\r",
							"                                    \"address\" : {\"type\" : \"string\"},\r",
							"                                    \"city\" : {\"type\" : \"string\"},\r",
							"                                    \"coordinates\" :\r",
							"                                    {\r",
							"                                        \"type\" : \"object\",\r",
							"                                        \"properties\" : \r",
							"                                        {\r",
							"                                            \"lat\" : {\"type\" : \"number\"},\r",
							"                                            \"lng\" : {\"type\" : \"number\"}\r",
							"                                        }\r",
							"                                    },\r",
							"                                    \"postalCode\" : \r",
							"                                    {\r",
							"                                        \"type\" : \"string\",\r",
							"                                        \"pattern\" : \"^\\\\d{5}([\\\\-]?\\\\d{4})?$\"\r",
							"                                    },\r",
							"                                    \"state\" : \r",
							"                                    {\r",
							"                                        \"type\" : \"string\",\r",
							"                                        \"pattern\" : \"^(([Aa][EeLlKkSsZzRr])|([Cc][AaOoTt])|([Dd][EeCc])|([Ff][MmLl])|([Gg][AaUu])|([Hh][Ii])|([Ii][DdLlNnAa])|([Kk][SsYy])|([Ll][Aa])|([Mm][EeHhDdAaIiNnSsOoTt])|([Nn][EeVvHhJjMmYyCcDd])|([Mm][Pp])|([Oo][HhKkRr])|([Pp][WwAaRr])|([Rr][Ii])|([Ss][CcDd])|([Tt][NnXx])|([Uu][Tt])|([Vv][TtIiAa])|([Ww][AaVvIiYy]))$\"\r",
							"                                    }\r",
							"                                }\r",
							"\r",
							"                            },\r",
							"                            \"department\" : {\"type\" : \"string\"},\r",
							"                            \"name\" : {\"type\" : \"string\"},\r",
							"                            \"title\" : {\"type\" : \"string\"},\r",
							"                        }\r",
							"                    },\r",
							"                    \"ein\" : {\"type\" : \"string\"},\r",
							"                    \"ssn\" : {\"type\" : \"string\"},\r",
							"                    \"userAgent\" : {\"type\" : \"string\"}\r",
							"                },\r",
							"                \"required\" : [\"id\",\"firstName\",\"lastName\",\"age\",\"gender\",\"email\",\"phone\",\"username\",\"password\",\"ip\",\"address\",\"macAddress\",\"bank\",\"ssn\"]\r",
							"            }\r",
							"        },\r",
							"        \"total\" : {\"type\" : \"integer\"},\r",
							"        \"skip\" : {\"type\":\"integer\"},\r",
							"        \"limit\" : {\"type\":\"integer\"},\r",
							"    },\r",
							"    \"required\" : [\"users\",\"total\",\"skip\",\"limit\"],\r",
							"    \"additionalProperties\" : false\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"/*for(var i = 0 ; i < 100 ; i++)\r",
							"{\r",
							"    console.log(jsonData.users[i].bank.cardNumber.length);\r",
							"}*/\r",
							"\r",
							"pm.test(\"Response code is 200\", function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"All users are listed\", function()\r",
							"{\r",
							"    pm.expect(jsonData.users.length).to.equal(jsonData.total);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the schema\", function()\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"     //Getting the required data for a random user to be used in the login request\r",
							"var randomIndex = Math.floor((Math.random() * jsonData.users.length));\r",
							"pm.environment.set(\"userId\",jsonData.users[randomIndex].id);\r",
							"pm.environment.set(\"userName\",jsonData.users[randomIndex].username);\r",
							"pm.environment.set(\"password\",jsonData.users[randomIndex].password);\r",
							"\r",
							"/*for(var i = 0 ; i < jsonData.users.length; i++)\r",
							"{\r",
							"    console.log(jsonData.users[i].bloodGroup);\r",
							"}*/\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users?limit=0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "limit",
							"value": "0",
							"description": "To show all results .. (if not exist, the results will be limited to the first 30)"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2- user login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const schema =\r",
							"{\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" :\r",
							"    {\r",
							"        \"id\" : {\"type\" : \"number\"},\r",
							"        \"username\" : {\"type\" : \"string\"},\r",
							"        \"email\" : {\"type\" : \"string\"},\r",
							"        \"firstName\" : {\"type\" : \"string\"},\r",
							"        \"lastName\" : {\"type\" : \"string\"},\r",
							"        \"gender\" : {\"enum\" : [\"male\",\"female\"]},\r",
							"        \"image\" : {\"type\" : \"string\"},\r",
							"        \"token\" : {\"type\" : \"string\"}\r",
							"    },\r",
							"    \"required\" : [\"id\",\"username\",\"email\",\"firstName\",\"lastName\",\"gender\",\"image\",\"token\"],\r",
							"    \"additionalProperties\" : false\r",
							"} \r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response code is 200\", function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the authentication\", function()\r",
							"{\r",
							"    pm.expect(jsonData.id).to.equal(pm.environment.get(\"userId\"));\r",
							"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"userName\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the schema\", function()\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"// Getting the token for the next requests\r",
							"pm.environment.set(\"token\",jsonData.token);\r",
							"\r",
							"//console.log(jsonData.token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"{{userName}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "3- get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const schema = \r",
							"{\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" :\r",
							"    {\r",
							"        \"products\" : \r",
							"        {\r",
							"            \"type\" : \"array\",\r",
							"            \"items\" :\r",
							"            {\r",
							"                \"type\" : \"object\",\r",
							"                \"properties\" : \r",
							"                {\r",
							"                    \"id\" : {\"type\" : \"number\"},\r",
							"                    \"title\" : {\"type\" : \"string\"},\r",
							"                    \"description\" : {\"type\" : \"string\"},\r",
							"                    \"price\" : {\"type\" : \"number\"},\r",
							"                    \"discountPercentage\" : \r",
							"                    {\r",
							"                        \"type\" : \"number\",\r",
							"                        \"pattern\" : \"^(100|\\\\d{1,2})(\\\\.\\\\d{1,2})?$\"\r",
							"                    },\r",
							"                    \"rating\" : \r",
							"                    {\r",
							"                        \"type\" : \"number\",\r",
							"                        \"pattern\" : \"^([0-5])(\\\\.\\\\d{1,2})?$\"\r",
							"                    },\r",
							"                    \"stock\" : {\"type\" : \"number\"},\r",
							"                    \"brand\" : {\"type\" : \"string\"},\r",
							"                    \"category\" : {\"type\" : \"string\"},\r",
							"                    \"thumbnail\" : {\"type\" : \"string\"},\r",
							"                    \"images\" : \r",
							"                    {\r",
							"                        \"type\" : \"array\",\r",
							"                        \"items\" :\r",
							"                        {\r",
							"                            \"type\" : \"string\"\r",
							"                        }\r",
							"                    }\r",
							"                },\r",
							"                \"required\" : [\"id\",\"title\",\"description\",\"price\",\"discountPercentage\",\"rating\",\"stock\",\"brand\",\"category\",\"thumbnail\",\"images\"],\r",
							"                \"additionalProperties\" : false\r",
							"            }\r",
							"        },\r",
							"        \"total\" : {\"type\" : \"number\"},\r",
							"        \"skip\" : {\"type\" : \"number\"},\r",
							"        \"limit\" : {\"type\" : \"number\"}\r",
							"    },\r",
							"    \"required\" : [\"products\",\"total\",\"skip\",\"limit\"],\r",
							"    \"additionalProperties\" : false\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response code is 200\", function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"All products are listed\", function()\r",
							"{\r",
							"    pm.expect(jsonData.products.length).to.equal(jsonData.total);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the schema\", function()\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products?limit=0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products"
					],
					"query": [
						{
							"key": "limit",
							"value": "0",
							"description": "To show all results .. (if not exist, the results will be limited to the first 30)"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4- search in products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const schema = \r",
							"{\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" :\r",
							"    {\r",
							"        \"products\" : \r",
							"        {\r",
							"            \"type\" : \"array\",\r",
							"            \"items\" :\r",
							"            {\r",
							"                \"type\" : \"object\",\r",
							"                \"properties\" : \r",
							"                {\r",
							"                    \"id\" : {\"type\" : \"number\"},\r",
							"                    \"title\" : {\"type\" : \"string\"},\r",
							"                    \"description\" : {\"type\" : \"string\"},\r",
							"                    \"price\" : {\"type\" : \"number\"},\r",
							"                    \"discountPercentage\" : \r",
							"                    {\r",
							"                        \"type\" : \"number\",\r",
							"                        \"pattern\" : \"^(100|\\\\d{1,2})(\\\\.\\\\d{1,2})?$\"\r",
							"                    },\r",
							"                    \"rating\" : \r",
							"                    {\r",
							"                        \"type\" : \"number\",\r",
							"                        \"pattern\" : \"^([0-5])(\\\\.\\\\d{1,2})?$\"\r",
							"                    },\r",
							"                    \"stock\" : {\"type\" : \"number\"},\r",
							"                    \"brand\" : {\"type\" : \"string\"},\r",
							"                    \"category\" : {\"type\" : \"string\"},\r",
							"                    \"thumbnail\" : {\"type\" : \"string\"},\r",
							"                    \"images\" : \r",
							"                    {\r",
							"                        \"type\" : \"array\",\r",
							"                        \"items\" :\r",
							"                        {\r",
							"                            \"type\" : \"string\"\r",
							"                        }\r",
							"                    }\r",
							"                },\r",
							"                \"required\" : [\"id\",\"title\",\"description\",\"price\",\"discountPercentage\",\"rating\",\"stock\",\"brand\",\"category\",\"thumbnail\",\"images\"],\r",
							"                \"additionalProperties\" : false\r",
							"            }\r",
							"        },\r",
							"        \"total\" : {\"type\" : \"number\"},\r",
							"        \"skip\" : {\"type\" : \"number\"},\r",
							"        \"limit\" : {\"type\" : \"number\"}\r",
							"    },\r",
							"    \"required\" : [\"products\",\"total\",\"skip\",\"limit\"],\r",
							"    \"additionalProperties\" : false\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response code is 200\", function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The relevant products are listed\", function()\r",
							"{\r",
							"    pm.expect(jsonData.products.length).to.equal(jsonData.total);\r",
							"\r",
							"    \r",
							"    var searchKeyWord = pm.environment.get(\"searchKeyWord\").toLowerCase();\r",
							"    var isSearchKeyWordExsit = false;\r",
							"\r",
							"    // To check that all the appeared products titles or descriptions contain the search key word\r",
							"    for (var i = 0 ; i < jsonData.products.length ; i++)\r",
							"    {\r",
							"        var  title = jsonData.products[i].title.toLowerCase();\r",
							"        var desc = jsonData.products[i].description.toLowerCase();\r",
							"\r",
							"        if (title.includes(searchKeyWord) || desc.includes(searchKeyWord))\r",
							"        {\r",
							"            isSearchKeyWordExsit = true;\r",
							"        }\r",
							"        else\r",
							"        {\r",
							"            console.log(\"The error in the product of index \" + i );\r",
							"            isSearchKeyWordExsit = false;\r",
							"            break;\r",
							"        }\r",
							"    };\r",
							"    pm.expect(isSearchKeyWordExsit).to.equal(true);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the schema\", function()\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"     //Getting a random product from the search results to be putted in the cart  & Getting its information\r",
							"var randomIndex = Math.floor((Math.random() * jsonData.products.length));\r",
							"pm.environment.set(\"productId\",jsonData.products[randomIndex].id);\r",
							"pm.environment.set(\"productTitle\",jsonData.products[randomIndex].title);\r",
							"pm.environment.set(\"productPrice\",jsonData.products[randomIndex].price);\r",
							"pm.environment.set(\"productStock\",jsonData.products[randomIndex].stock);\r",
							"\r",
							"/*console.log(randomIndex);\r",
							"console.log(jsonData.products[randomIndex].id);*/\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//To set the search key word\r",
							"pm.environment.set(\"searchKeyWord\",\"laptop\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/products/search?limit=0&q={{searchKeyWord}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"products",
						"search"
					],
					"query": [
						{
							"key": "limit",
							"value": "0"
						},
						{
							"key": "q",
							"value": "{{searchKeyWord}}",
							"description": "Search query param"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5- add a product in a new created cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = \r",
							"{\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : \r",
							"    {\r",
							"        \"id\" : {\"type\" : \"number\"},\r",
							"        \"products\" : \r",
							"        {\r",
							"            \"type\" : \"array\",\r",
							"            \"items\" :\r",
							"            {\r",
							"                \"type\" : \"object\",\r",
							"                \"properties\" :\r",
							"                {\r",
							"                    \"id\" : {\"type\" : \"number\"},\r",
							"                    \"title\" : {\"type\" : \"string\"},\r",
							"                    \"price\" : {\"type\" : \"number\"},\r",
							"                    \"quantity\" : {\"type\" : \"number\"},\r",
							"                    \"total\" : {\"type\" : \"number\"},\r",
							"                    \"discountPercentage\" : {\"type\" : \"number\"},\r",
							"                    \"discountedPrice\" : {\"type\" : \"number\"}\r",
							"                },\r",
							"                \"required\" : [\"id\",\"title\",\"price\",\"quantity\",\"total\",\"discountPercentage\",\"discountedPrice\"],\r",
							"                \"additionalProperties\" : false\r",
							"            }\r",
							"        },\r",
							"        \"total\" : {\"type\" : \"number\"},\r",
							"        \"discountedTotal\" : {\"type\" : \"number\"},\r",
							"        \"userId\" : {\"type\" : \"number\"},\r",
							"        \"totalProducts\" : {\"type\" : \"number\"},\r",
							"        \"totalQuantity\" : {\"type\" : \"number\"}\r",
							"    },\r",
							"    \"required\" : [\"id\",\"products\",\"total\",\"discountedTotal\",\"userId\",\"totalProducts\",\"totalQuantity\"],\r",
							"    \"additionalProperties\" : false\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"var productTotal = parseFloat(jsonData.products[0].total);\r",
							"var productPrice = parseFloat(jsonData.products[0].price);\r",
							"var productQuantity = parseFloat(jsonData.products[0].quantity);\r",
							"var productDiscountPercentage = parseFloat(jsonData.products[0].discountPercentage);\r",
							"var productDiscountedPrice = parseFloat(jsonData.products[0].discountedPrice);\r",
							"\r",
							"var cartTotal = parseFloat(jsonData.total);\r",
							"var cartTotalQuantity = parseFloat(jsonData.totalQuantity);\r",
							"var cartDiscountedTotal = parseFloat(jsonData.discountedTotal);\r",
							"var cartTotalProducts = parseFloat(jsonData.totalProducts);\r",
							"\r",
							"\r",
							"pm.test(\"Response code is 200\", function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"The cart belongs to the right user\", function()\r",
							"{\r",
							"    pm.expect(jsonData.userId).to.equal(parseInt(pm.environment.get(\"userId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"The product is in the stock\", function()\r",
							"{\r",
							"    //Product quantity should be ranged form 1 to the product stock\r",
							"    pm.expect(jsonData.products[0].quantity).to.be.within( 1 , parseInt(pm.environment.get(\"productStock\")));\r",
							"});\r",
							"\r",
							"pm.test(\"The selected product is added successfully in the new created cart\", function()\r",
							"{\r",
							"    //First product in the cart is the selected one\r",
							"    pm.expect(jsonData.products[0].id).to.equal( parseInt(pm.environment.get(\"productId\")) );  \r",
							"});\r",
							"\r",
							"pm.test(\"Validate product prices calculations are consistent\", function()\r",
							"{\r",
							"    //product total = price * quantity\r",
							"    pm.expect(productTotal).to.equal(productPrice * productQuantity);\r",
							"\r",
							"    //product discounted price = product total - (product total * (productDiscountPercentage/100))\r",
							"    pm.expect(productDiscountedPrice).to.equal( productTotal - ( productTotal * (productDiscountPercentage/100) ) );\r",
							"});\r",
							"\r",
							"pm.test(\"Validate that cart info is consistent with product info\", function()\r",
							"{\r",
							"    //cart total = product total  (Because it's only one product)\r",
							"    pm.expect(cartTotal).to.equal(productTotal);\r",
							"\r",
							"    //cart discounted total = product discounted price    (Because it's only one product)\r",
							"    pm.expect(cartDiscountedTotal).to.equal(productDiscountedPrice);\r",
							"\r",
							"    //total products in the cart = products array length  \r",
							"    pm.expect(cartTotalProducts).to.equal(jsonData.products.length);\r",
							"\r",
							"    //cart total quantity = product quantity  (Because it's only one product)\r",
							"    pm.expect(cartTotalQuantity).to.equal(productQuantity);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the schema\", function()\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// Getting cart info for the next requests\r",
							"pm.environment.set(\"cartId\",jsonData.id);\r",
							"pm.environment.set(\"cartTotal\", cartTotal);\r",
							"pm.environment.set(\"cartDiscountedTotal\", cartDiscountedTotal);\r",
							"pm.environment.set(\"cartTotalProducts\", cartTotalProducts);\r",
							"pm.environment.set(\"cartTotalQuantity\", cartTotalQuantity);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": {{userId}},\r\n    \"products\": \r\n    [\r\n      {\r\n        \"id\": {{productId}},\r\n        \"quantity\": 1\r\n      }\r\n    ]\r\n  }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carts/add",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "6- get the user cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const schema = \r",
							"{\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" :\r",
							"    {\r",
							"        \"carts\" : \r",
							"        {\r",
							"            \"type\" : \"array\",\r",
							"            \"items\" :\r",
							"            {\r",
							"                \"type\" : \"object\",\r",
							"                \"properties\" :\r",
							"                {\r",
							"                    \"id\" : {\"type\" : \"number\"},\r",
							"                    \"products\" : \r",
							"                    {\r",
							"                        \"type\" : \"array\",\r",
							"                        \"items\" :\r",
							"                        {\r",
							"                            \"type\" : \"object\",\r",
							"                            \"properties\" :\r",
							"                            {\r",
							"                                \"id\" : {\"type\" : \"number\"},\r",
							"                                \"title\" : {\"type\" : \"string\"},\r",
							"                                \"price\" : {\"type\" : \"number\"},\r",
							"                                \"quantity\" :{\"type\" : \"number\"},\r",
							"                                \"total\" : {\"type\" : \"number\"},\r",
							"                                \"discountPercentage\" : {\"type\" : \"number\"},\r",
							"                                \"discountedPrice\" : {\"type\" : \"number\"}\r",
							"                            },\r",
							"                            \"required\" : [\"id\", \"title\", \"price\", \"quantity\", \"total\", \"discountPercentage\", \"discountedPrice\"],\r",
							"                            \"additionalProperties\" : false\r",
							"                        }\r",
							"                    },\r",
							"                    \"total\" : {\"type\" : \"number\"},\r",
							"                    \"discountedTotal\" : {\"type\" : \"number\"},\r",
							"                    \"userId\" : {\"type\" : \"number\"},\r",
							"                    \"totalProducts\" : {\"type\" : \"number\"},\r",
							"                    \"totalQuantity\" : {\"type\" : \"number\"}\r",
							"                },\r",
							"                \"required\" : [\"id\", \"products\", \"total\", \"discountedTotal\", \"userId\", \"totalProducts\", \"totalQuantity\"],\r",
							"                \"additionalProperties\": false\r",
							"            },\r",
							"        },\r",
							"        \"total\" : {\"type\" : \"number\"},\r",
							"        \"skip\" : {\"type\" : \"number\"},\r",
							"        \"limit\" : {\"type\" : \"number\"}\r",
							"    },\r",
							"    \"required\" : [\"carts\",\"total\",\"skip\",\"limit\"],\r",
							"    \"additionalProperties\" : false\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response code is 200\", function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the schema\", function()\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"The user has only one cart\", function()\r",
							"{\r",
							"    pm.expect(jsonData.carts.length).to.equal(1);\r",
							"});\r",
							"\r",
							"pm.test(\"The cart id is the same cart id which the selected product is putted in\", function()\r",
							"{\r",
							"    pm.expect(jsonData.carts[0].id).to.equal(parseInt(pm.environment.get(\"cartId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"The cart is belonging to the user\", function()\r",
							"{\r",
							"    pm.expect(jsonData.carts[0].userId).to.equal(parseInt(pm.environment.get(\"userId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Cart info is consistent wiht its info when it was created\", function()\r",
							"{\r",
							"    pm.expect(jsonData.carts[0].total).to.equal(parseInt(pm.environment.get(\"cartTotal\")));\r",
							"    pm.expect(jsonData.carts[0].discountedTotal).to.equal(parseInt(pm.environment.get(\"cartDiscountedTotal\")));\r",
							"    pm.expect(jsonData.carts[0].totalProducts).to.equal(parseInt(pm.environment.get(\"cartTotalProducts\")));\r",
							"    pm.expect(jsonData.carts[0].totalQuantity).to.equal(parseInt(pm.environment.get(\"cartTotalQuantity\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Cart contains the selected product\", function()\r",
							"{\r",
							"    pm.expect(jsonData.carts[0].products[0].id).to.equal(parseInt(pm.environment.get(\"productId\")));\r",
							"    pm.expect(jsonData.carts[0].products[0].title).to.equal(parseInt(pm.environment.get(\"productTitle\")));\r",
							"    pm.expect(jsonData.carts[0].products[0].price).to.equal(parseInt(pm.environment.get(\"productPrice\")));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts/user/{{userId}}?limit=0",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						"user",
						"{{userId}}"
					],
					"query": [
						{
							"key": "limit",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "7- update the cart by adding a new product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//send a request to get all products, then select a new random product to be added to the existing cart \r",
							"\r",
							"pm.sendRequest({\r",
							"            url: pm.environment.get(\"baseUrl\") + \"/products?limit=0\",\r",
							"            method: 'GET',\r",
							"            header: \r",
							"            {\r",
							"                'Authorization': \"Bearer \" + pm.environment.get(\"token\"),\r",
							"            }\r",
							"        }, (error, response) => \r",
							"            {\r",
							"                var data = response.json();\r",
							"                var randomIndex = Math.floor((Math.random() * data.products.length));\r",
							"                pm.environment.set(\"newProductId\",data.products[randomIndex].id);\r",
							"                pm.environment.set(\"newProductTitle\",data.products[randomIndex].title);\r",
							"                pm.environment.set(\"newProductPrice\",data.products[randomIndex].price);\r",
							"                pm.environment.set(\"newProductStock\",data.products[randomIndex].stock);\r",
							"\r",
							"                //console.log(data);\r",
							"            });\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const schema = \r",
							"{\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : \r",
							"    {\r",
							"        \"id\" : {\"type\" : \"string\"},\r",
							"        \"products\" : \r",
							"        {\r",
							"            \"type\" : \"array\",\r",
							"            \"items\" :\r",
							"            {\r",
							"                \"type\" : \"object\",\r",
							"                \"properties\" :\r",
							"                {\r",
							"                    \"id\" : {\"type\" : \"number\"},\r",
							"                    \"title\" : {\"type\" : \"string\"},\r",
							"                    \"price\" : {\"type\" : \"number\"},\r",
							"                    \"quantity\" : {\"type\" : \"number\"},\r",
							"                    \"total\" : {\"type\" : \"number\"},\r",
							"                    \"discountPercentage\" : {\"type\" : \"number\"},\r",
							"                    \"discountedPrice\" : {\"type\" : \"number\"}\r",
							"                },\r",
							"                \"required\" : [\"id\",\"title\",\"price\",\"quantity\",\"total\",\"discountPercentage\",\"discountedPrice\"],\r",
							"                \"additionalProperties\" : false\r",
							"            }\r",
							"        },\r",
							"        \"total\" : {\"type\" : \"number\"},\r",
							"        \"discountedTotal\" : {\"type\" : \"number\"},\r",
							"        \"userId\" : {\"type\" : \"number\"},\r",
							"        \"totalProducts\" : {\"type\" : \"number\"},\r",
							"        \"totalQuantity\" : {\"type\" : \"number\"}\r",
							"    },\r",
							"    \"required\" : [\"id\",\"products\",\"total\",\"discountedTotal\",\"userId\",\"totalProducts\",\"totalQuantity\"],\r",
							"    \"additionalProperties\" : false\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response code is 200\", function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the schema\", function()\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"The cart id is the same cart id which the selected new product is putted in\", function()\r",
							"{\r",
							"    pm.expect(jsonData.id).to.equal(pm.environment.get(\"cartId\"));\r",
							"});\r",
							"\r",
							"pm.test(\"The cart is belonging to the user\", function()\r",
							"{\r",
							"    pm.expect(jsonData.userId).to.equal(parseInt(pm.environment.get(\"userId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"The newly selected product is in the stock\", function()\r",
							"{\r",
							"    //Product quantity should be ranged form 1 to the product stock\r",
							"    pm.expect(jsonData.products[0].quantity).to.be.within( 1 , parseInt(pm.environment.get(\"newProductStock\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Cart contains the newly selected product\", function()\r",
							"{\r",
							"    pm.expect(jsonData.products[0].id).to.equal(parseInt(pm.environment.get(\"newProductId\")));\r",
							"    pm.expect(jsonData.products[0].title).to.equal(parseInt(pm.environment.get(\"newProductTitle\")));\r",
							"    pm.expect(jsonData.products[0].price).to.equal(parseInt(pm.environment.get(\"newProductPrice\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Cart still contains the old selected product\", function()\r",
							"{\r",
							"    pm.expect(jsonData.products[1].id).to.equal(parseInt(pm.environment.get(\"productId\")));\r",
							"    pm.expect(jsonData.products[1].title).to.equal(parseInt(pm.environment.get(\"productTitle\")));\r",
							"    pm.expect(jsonData.products[1].price).to.equal(parseInt(pm.environment.get(\"productPrice\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Cart info and prices calculations are updated and consistent\", function()\r",
							"{\r",
							"    // cart total price = the two products total prices\r",
							"    pm.expect(jsonData.total).to.equal(jsonData.products[0].total + jsonData.products[1].total);\r",
							"    // cart discounted total =  the two products discounted prices\r",
							"    pm.expect(jsonData.discountedTotal).to.equal(jsonData.products[0].discountedPrice + jsonData.products[1].discountedPrice);\r",
							"    // cart total product = product array length (which should be 2)\r",
							"    pm.expect(jsonData.totalProducts).to.equal(jsonData.products.length);\r",
							"    // cart total quantity = the two products quantites\r",
							"    pm.expect(jsonData.totalQuantity).to.equal(jsonData.products[0].quantity + jsonData.products[1].quantity);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"merge\": true,\r\n    \"products\": \r\n    [\r\n      {\r\n        \"id\": {{newProductId}},\r\n        \"quantity\": 1\r\n      }\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/carts/{{cartId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						"{{cartId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "8- delete the cart",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const schema = \r",
							"{\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : \r",
							"    {\r",
							"        \"id\" : {\"type\" : \"number\"},\r",
							"        \"products\" : \r",
							"        {\r",
							"            \"type\" : \"array\",\r",
							"            \"items\" :\r",
							"            {\r",
							"                \"type\" : \"object\",\r",
							"                \"properties\" :\r",
							"                {\r",
							"                    \"id\" : {\"type\" : \"number\"},\r",
							"                    \"title\" : {\"type\" : \"string\"},\r",
							"                    \"price\" : {\"type\" : \"number\"},\r",
							"                    \"quantity\" : {\"type\" : \"number\"},\r",
							"                    \"total\" : {\"type\" : \"number\"},\r",
							"                    \"discountPercentage\" : {\"type\" : \"number\"},\r",
							"                    \"discountedPrice\" : {\"type\" : \"number\"}\r",
							"                },\r",
							"                \"required\" : [\"id\",\"title\",\"price\",\"quantity\",\"total\",\"discountPercentage\",\"discountedPrice\"],\r",
							"                \"additionalProperties\" : false\r",
							"            }\r",
							"        },\r",
							"        \"total\" : {\"type\" : \"number\"},\r",
							"        \"discountedTotal\" : {\"type\" : \"number\"},\r",
							"        \"userId\" : {\"type\" : \"number\"},\r",
							"        \"totalProducts\" : {\"type\" : \"number\"},\r",
							"        \"totalQuantity\" : {\"type\" : \"number\"},\r",
							"        \"isDeleted\" : {\"const\" : true},\r",
							"        \"deletedOn\" : {\"type\" : \"string\"}\r",
							"    },\r",
							"    \"required\" : [\"id\",\"products\",\"total\",\"discountedTotal\",\"userId\",\"totalProducts\",\"totalQuantity\", \"isDeleted\", \"deletedOn\"],\r",
							"    \"additionalProperties\" : false\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response code is 200\", function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating the schema\", function()\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"The cart id is correct\", function()\r",
							"{\r",
							"    pm.expect(jsonData.id).to.equal(parseInt(pm.environment.get(\"cartId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"The cart is belonging to the user\", function()\r",
							"{\r",
							"    pm.expect(jsonData.userId).to.equal(parseInt(pm.environment.get(\"userId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Cart contains the two selected product\", function()\r",
							"{\r",
							"    pm.expect(jsonData.products[0].id).to.equal(parseInt(pm.environment.get(\"newProductId\")));\r",
							"    pm.expect(jsonData.products[1].id).to.equal(parseInt(pm.environment.get(\"productId\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Cart is deleted successfully\", function()\r",
							"{\r",
							"   pm.expect(jsonData.isDeleted).to.equal(true);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/carts/{{cartId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"carts",
						"{{cartId}}"
					]
				}
			},
			"response": []
		}
	]
}